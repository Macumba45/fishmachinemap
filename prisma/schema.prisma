// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?  @map(name: "hashed_password")
  markers   Marker[]
  Likes     Likes[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Marker {
  id          String    @id @default(cuid())
  direction   String?
  markerType  String?
  description String?
  picture     String?
  location    Location?
  published   Boolean?  @default(false)
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  likes       Likes[]
}

model Location {
  id        String   @id @default(cuid())
  lat       Float?
  lng       Float?
  marker    Marker?  @relation(fields: [markerId], references: [id], onDelete: Cascade)
  markerId  String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Likes {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  marker    Marker?  @relation(fields: [markerId], references: [id], onDelete: Cascade)
  userId    String?
  markerId  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
}
