// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id           String         @id @default(cuid())
  name         String?
  email        String?        @unique
  password     String?        @map(name: "hashed_password")
  role         String?        @default("USER")
  picture      String?
  markers      Marker[]
  experiencies Experiencies[]
  Likes        Likes[]
  blaBlaFish   BlaBlaFish[]
  stores       Store[]
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @updatedAt @map(name: "updated_at")
  comments     Comments[]

  @@map(name: "users")
}

model UserRecovery {
  id        String   @id @default(cuid())
  email     String?
  token     String?
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Marker {
  id          String     @id @default(cuid())
  direction   String?
  markerType  String?
  description String?
  picture     String?
  location    Location?
  visible     Boolean?   @default(true)
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  likes       Likes[]
  comments    Comments[]
}

model Location {
  id        String   @id @default(cuid())
  lat       Float?
  lng       Float?
  marker    Marker?  @relation(fields: [markerId], references: [id], onDelete: Cascade)
  markerId  String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Comments {
  id        String   @id @default(cuid())
  text      String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  marker    Marker?  @relation(fields: [markerId], references: [id], onDelete: Cascade)
  markerId  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Likes {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  marker    Marker?  @relation(fields: [markerId], references: [id], onDelete: Cascade)
  userId    String?
  markerId  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model BlaBlaFish {
  id            String   @id @default(cuid())
  date          String?
  departureCity String?
  arrivalCity   String?
  departureTime String?
  description   String?
  price         String?
  phone         String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime @default(now())
}

model Store {
  id          String   @id @default(cuid())
  title       String?
  category    String?
  description String?
  picture     String?
  price       String?
  phone       String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
}

model Experiencies {
  id          String   @id @default(cuid())
  type        String?
  picture     String?
  title       String?
  category    String?
  description String?
  price       String?
  phone       String?
  city        String?
  whatsapp    String?
  url         String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
}
